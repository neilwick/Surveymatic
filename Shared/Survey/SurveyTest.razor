@page "/SurveyTest"
@using Surveymatic.Data
@using Model
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<HelpContext> ContextFactory

    <h1>Survey</h1>
<h2>Select Survey</h2>
<div class="row">
    <div class="col-md-4">

        <EditForm Model=@questionTranslations OnSubmit=@FormSubmitted>
            @*<form method="post">*@
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <div>
                    <label asp-for="Survey.UserId" class="control-label"></label>
                </div>
                <div>
                    <select asp-for="Survey.UserId" asp-items="ViewBag.SurveyId" name="surveySelect" @onchange="@SurveyChoice" style="width:150px">
                        @foreach (SurveyTranslation surveyTranslation in surveyTranslations)
                        {
                            <option value="@surveyTranslation.SurveyId">@surveyTranslation.Title</option>

                        }
                    </select>

                </div>
            </div>
            <div class="form-group">
                <h3>Please answer “YES” or “NO” to each question:</h3>
            </div>
            <div class="form-group">
                <ul>
                    @foreach (QuestionTranslation questionTranslation in questionTranslations)
                    {
                    <li>
                        <h3>@questionTranslation.Text</h3>
                        @foreach (Answer answer in questionTranslation.Question.Answers)
                        {
                            @*<p><input id="1" name="ss" type="radio" value="@answer.AnswerInt">@answer.AnswerTxt</p>*@
                            <label>
                                <input name="answer" type="radio" value="@answer.AnswerInt" bind="@answer.AnswerInt">@answer.AnswerTxt
                            </label>

                        }

                    </li>

                    }
                </ul>

            </div>
            <div class="form-group">
                <input type="submit" value="Submit" class="btn btn-primary" />
                <button @onclick="submitSurvey">submit1</button>
            </div>
            </EditForm>
            @*</form>*@
    </div>
</div>




 


@code {
    private string surveyId { get; set; }
    private string title{ get; set; }
    int AnswerCode = 0;
    private string success = "";
    private string answerTxt;
    private int answerInt;
    private List<Survey> surveys = new List<Survey>();
    private List<SurveyTranslation> surveyTranslations = new List<SurveyTranslation>();
    private List<Answer> answers = new List<Answer>();

    private List<QuestionTranslation> questionTranslations = new List<QuestionTranslation>();


    private List<Answer> GetAnswerById(int id)
    {
        using (var db = ContextFactory.CreateDbContext())
        {
            var answers = db.Answers.Where(a => a.QuestionId == id);
            return answers.ToList();
        }

    }

    protected override async Task OnInitializedAsync()
    {
        using var db = ContextFactory.CreateDbContext();
        surveyTranslations = await db.SurveyTranslations.Where(q =>q.Language == "en" ).ToListAsync();
        //  Console.WriteLine("count" + surveyTranslations.Count);    

    }


    private async Task SurveyChoice(ChangeEventArgs e) {

        // surveys.Clear();
        //  title = string.Empty;

        int surveyId = int.Parse(e.Value.ToString());



        using var db = ContextFactory.CreateDbContext();

        questionTranslations = await db.QuestionTranslations.Include(qt =>qt.Question.Answers)
       .Where(q =>q.Language == "en" && q.Question.SurveyId == surveyId).ToListAsync();

         @* questionTranslations = await db.QuestionTranslations.ToListAsync(); *@


    }

    private async void submitSurvey()
    {
        try
        {
            var result = new Answer { AnswerTxt = answerTxt, AnswerInt = answerInt };
            using var db = ContextFactory.CreateDbContext();

            db.Answers.Add(result);
            var item = await db.SaveChangesAsync();


            success = "saved successfully";
        }
        catch
        {
            base.StateHasChanged();
            success = "unsuccessfully";
        }

    }

    void FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();

    }


}
