@page "/take/{id}"
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Model
@using Surveymatic.Model.LoginData
@inject IDbContextFactory<SurveymaticContext> dBContextFactory
@using Model.SurveyResponse
@using Pages
@using Surveymatic.Data
@inject SurveyService SurveyRepository

<div class="card">
    <h1>Survey Choice</h1>
    <div class="card-body">
        <form>

            <div class="form-group">
                @if (surveyContent != null)
                {
                    @foreach (var q in survey.Questions)
                    {
                        @* <h3>@q.QuestionId.ToString()</h3> *@
                        <QuestionComponent id="@q.QuestionId.ToString()" OnClick="AnswerClick" />
                    }
                }
            </div>

            <div>
                <button @onclick=OnClick>Submit</button>
                <button @onclick=OnCancel>Cancel</button>
            </div>




        </form>
    </div>
</div>
<dialog>Confirmation</dialog>

@code {
    private string success = "";


    [Parameter]
    public string id { get; set; }
    private Survey survey;
    private SurveyTranslation surveyContent;

    const string Language = "en";
    private List<QuestionTranslation> questionTranslations = new List<QuestionTranslation>();
    private List<Answer> answers = new List<Answer>();


    public async Task AnswerClick(QuestionResponse response)
    {

        // creates an answer entry in the db, this happens onclick -> should be moved to submit?
        var answer = new Answer
        {
            AnswerTxt = "",
            AnswerInt = response.value ? 1 : 0,
            PersonId = UserInfo.User.SiteUserId,
            QuestionId = response.Question.QuestionId
        };

        answers.Add(answer);

    }


    Model.Answer getAnswer(int questionId)
    {
        Answer result = null;
        foreach (var ans in answers)
        {
            if (ans.QuestionId == questionId)
            {
                return ans;
            }
        }
        return result;
    }


    protected override async Task OnInitializedAsync()
    {
        answers.Clear();
        using var db = dBContextFactory.CreateDbContext();
        int nid = Int16.Parse(id);
        survey = await (db.Surveys
        .Where(q => q.SurveyId == nid)
        .Include(q => q.Questions)
        .FirstAsync());

        var t = await db.SurveyTranslations.Where(q => q.SurveyId == nid).ToListAsync();

        foreach (var st in t)
        {
            if (surveyContent == null)
            {
                surveyContent = st;
            }
            else if (st.Language == Language)
            {
                surveyContent = st;
            }
            else
            {
                ;
            }
        }
    }

    public void OnClick()
    {
        try
        {
            using var db = dBContextFactory.CreateDbContext();
            foreach (Answer answer in answers)
            {
                db.Answers.Add(answer);
            }
            db.SaveChanges();
            NavigationManager.NavigateTo($"/list", forceLoad: true);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }
    }


    public void OnCancel()
    {
        answers.Clear();
        NavigationManager.NavigateTo($"/list", forceLoad: true);
    }


}