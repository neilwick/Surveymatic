@page "/createsurvey"
@page "/createsurvey/{SurveyId:int}"

@using Model;
@using Surveymatic.Data
@using Model.Questionnaire
@using Surveymatic.Model.LoginData

@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<SurveymaticContext> DbFactory

<div class="card">



    <div class="card-header">
        Add a Survey
    </div>
    <div class="card-body">
        @if (_survey != null && FormBilang.en != null && FormBilang.fr != null)
        {
            <EditForm Model="@FormBilang" OnSubmit="@HandleSubmit">

                <div class="form-group">
                    <label for="Title_en">English Title </label>
                    <input class="form-control" type="text" id="Title_en" @bind="FormBilang.en.Title" />
                </div>
                <div class="form-group">
                    <label for="Title_fr">French Title </label>
                    <input class="form-control" type="text" id="Title_fr" @bind="FormBilang.fr.Title" />
                </div>
                <div class="form-group">
                    <label for="Desc_en">English Description</label>
                    <input class="form-control" type="text" id="Desc_en" @bind="FormBilang.en.Description" />
                </div>

                <div class="form-group">
                    <label for="Desc_fr">French Description</label>
                    <input class="form-control" type="text" id="Desc_fr" @bind="FormBilang.fr.Description" />
                </div>
                <div class="form-group">
                    <label for="Instr_en">English Instruction</label>
                    <input class="form-control" type="text" id="Instr_en" @bind="FormBilang.en.Instruction" />
                </div>
                <div class="form-group">
                    <label for="Instr_fr">English Instruction</label>
                    <input class="form-control" type="text" id="Title_fr" @bind="FormBilang.fr.Instruction" />
                </div>

                <button type="submit">Submit</button>
            </EditForm>


            <EditForm Model="@FormQuestion">
                <h2>Add Question</h2>

                <div class="form-group">
                    <label for="Text_en">English Text </label>
                    <input class="form-control" placeholder="Text" id="Text_en" @bind="FormQuestion.en.Text" />
                </div>
                <div class="form-group">
                    <label for="Text_fr">French Text </label>
                    <input class="form-control" placeholder="Text" id="Text_fr" @bind="FormQuestion.fr.Text" />
                </div>
                <div>

                    <button @onclick="AddQuestion">Add</button>
                </div>
            </EditForm>

            <div class="questions">
                @foreach (var question in _questions)
                {
                    <Surveymatic.Shared.Question question="@question" />
                }
            </div>

        }
        else
        {

        }
    </div>
</div>

@code {

    public Surveymatic.Model.Survey _survey;
    public List<Surveymatic.Model.Question> _questions = new();


    public SurveyBilang FormBilang = new();
    public QuestionBilang FormQuestion = new();

    [Parameter]
    public int SurveyId { get; set; }



    private async Task AddQuestion()
    {
        // todo save to db
        using var db = DbFactory.CreateDbContext();

        var q = new Surveymatic.Model.Question { SurveyId = _survey.SurveyId };
        q.QuestionTranslations.Add(FormQuestion.en);
        q.QuestionTranslations.Add(FormQuestion.fr);
        db.Questions.Add(q);
        await db.SaveChangesAsync(); //error when saving second question to survey
        _questions.Add(q);

        FormQuestion = new();
    }

    private async Task HandleSubmit()
    {
        using var db = DbFactory.CreateDbContext();


        var frTranslation = await db.SurveyTranslations
        .Where(fr => fr.SurveyId == _survey.SurveyId && fr.Language == "fr").FirstOrDefaultAsync();
        frTranslation.Title = FormBilang.fr.Title;
        // other fields
        frTranslation.Description = FormBilang.fr.Description;
        frTranslation.Instruction = FormBilang.fr.Instruction;
        //save to database
        await db.SaveChangesAsync();



        var enTranslation = await db.SurveyTranslations
        .Where(en => en.SurveyId == _survey.SurveyId && en.Language == "en").FirstOrDefaultAsync();
        enTranslation.Title = FormBilang.en.Title;
        // other fields
        enTranslation.Description = FormBilang.en.Description;
        enTranslation.Instruction = FormBilang.en.Instruction;
        //save to database
        await db.SaveChangesAsync();





    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (UserInfo.HasRole("admin"))
        {

            if (first)
            {
                using var db = DbFactory.CreateDbContext();

                // if a survey is specified
                if (SurveyId != 0)
                {
                    _survey = await db.Surveys
                    .Where(s => s.SurveyId == SurveyId)
                    .Include(st => st.SurveyTranslations)
                    .FirstOrDefaultAsync();

                }
                else
                {
                    _survey = new Surveymatic.Model.Survey { UserId = UserInfo.User.SiteUserId };
                    db.Surveys.Add(_survey);
                    await db.SaveChangesAsync();

                }
                SurveyId = _survey.SurveyId;
                // get translations in en and fr
                foreach (var translation in _survey.SurveyTranslations)
                {
                    if (translation.Language == "en")
                    {
                        FormBilang.en = translation;
                    }
                    else if (translation.Language == "fr")
                    {
                        FormBilang.fr = translation;
                    }
                }

                if (FormBilang.en == null)
                {
                    FormBilang.en = new Surveymatic.Model.SurveyTranslation { SurveyId = _survey.SurveyId, Language = "en" };
                    db.SurveyTranslations.Add(FormBilang.en);
                    await db.SaveChangesAsync();
                }

                if (FormBilang.fr == null)
                {
                    FormBilang.fr = new Surveymatic.Model.SurveyTranslation { SurveyId = _survey.SurveyId, Language = "fr" };
                    db.SurveyTranslations.Add(FormBilang.fr);
                    await db.SaveChangesAsync();
                }



                _questions = await db.Questions.Where(q => q.SurveyId == SurveyId).Include(qt => qt.QuestionTranslations).ToListAsync();
                StateHasChanged();
            }
        }

    }

}