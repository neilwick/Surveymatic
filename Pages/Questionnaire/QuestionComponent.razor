@using Data
@using Model

@using Microsoft.EntityFrameworkCore
@using Model.SurveyResponse
@inject IDbContextFactory<SurveymaticContext> DbFactory
@inject SurveyService SurveyRepository


<div>
    @if (questionContent != null)
    {
        <div>
           
            <legend><span class="field-name">
                 @questionContent.Text
            </span></legend>
          
                
                <li class="radio"><label for="true-@id"> <input type="radio" @onclick="@(() => setValue(true))" id="true-@id" name="radio-@id" value="Yes" />True</label></li>               
                <li class="radio"><label for="false-@id"> <input type="radio" @onclick="@(() => setValue(false))" id="false-@id" name="radio-@id" value="No" />False</label></li>               
          
           
            
        </div>
       
    }
</div>

@code{

    [Parameter]
    public EventCallback<QuestionResponse> OnClick { get; set; }

    [Parameter]
    public string id { get; set; }
    public int Type { get; set; }

    public bool value { get; set; }
    public string Language = "en";
    public QuestionTranslation questionContent { get; set; }

    public Question question { get; set; }

    private List<QuestionTranslation> questionTranslations = new List<QuestionTranslation>();


    private void setValue(bool val)
    {
        value = val;
        OnClick.InvokeAsync(new QuestionResponse { value = val, Question = question });
    }
    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();
        int qid = Int16.Parse(id);

        question = await db.Questions.Where(q => q.QuestionId == qid).Include(e =>
        e.QuestionTranslations).FirstOrDefaultAsync();


        foreach (var qt in question.QuestionTranslations)
        {
            if (questionContent == null)
            {
                questionContent = qt;
            }
            else if (qt.Language == Language)
            {
                questionContent = qt;
            }
        }
       Refresh();
    }
    public void Refresh()
    {
        using var db = DbFactory.CreateDbContext();
        
        questionTranslations = db.QuestionTranslations.Include(qt =>qt.Question).
       ThenInclude(q =>q.Survey).ToList();
        @* question = db.Questions.Where(q=>q.SurveyId == question.SurveyId).Include(e =>
        e.QuestionTranslations).ToList(); *@


    } 
  
}