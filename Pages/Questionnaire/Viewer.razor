@page "/list"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Model
@using Model.LoginData
@using Surveymatic.Pages

@inject IDbContextFactory<SurveymaticContext> ContextFactory
@using Surveymatic.Data
@inject SurveyService SurveyRepository


<main role="main" property="mainContentOfPage" class="container">
      <h1 id="wb-cont" property="name">Survey</h1>
      <HelpContent HelpTag="surveylist" />
<table class="table table-striped">
<thead>
<tr>
<th scope="col">ID</th>
<th scope="col">Take</th>
<th scope="col">@if(UserInfo.HasRole("admin")) {
                    <th>Edit</th>
                    } </th>
<th scope="col">Description</th>
<th scope="col">Instruction</th>
</tr>
</thead>
 <tbody>
             @foreach (SurveyTranslation surveyTranslation in surveyTranslations)
            {
                var url = "/take/" + surveyTranslation.SurveyId.ToString();

                <tr>
                    <td>
                        @surveyTranslation.SurveyId
                    </td>
                    <td>
                        @if (!IsSurveyTaken(surveyTranslation.SurveyId)) {
                            <NavLink href="@url">✔</NavLink>
                        }
                    </td>

                    @if(UserInfo.HasRole("admin")) {

                        var editUrl = "/createsurvey/" + surveyTranslation.SurveyId;
                        <td><NavLink href="@editUrl">✏</NavLink></td>
                        }
                    <td>@surveyTranslation.Title</td>
                    <td>@surveyTranslation.Description</td>
                    <td>@surveyTranslation.Instruction</td>
                </tr>
            }

        </tbody>

</table>

</main>



@code {

    private List<Survey> surveys = new List<Survey>();
    private List<SurveyTranslation> surveyTranslations = new List<SurveyTranslation>();

    private List<Answer> answers = new List<Answer>();

    protected override async Task OnInitializedAsync()
    {
        using var db = ContextFactory.CreateDbContext();
        surveyTranslations = await db.SurveyTranslations.Where(q => q.Language == "en").ToListAsync();
        answers = db.Answers.ToList();
        foreach (var ans in answers)
        {
            var questionEntity = await db.Questions.FindAsync(ans.QuestionId);
            ans.Question = new Surveymatic.Model.Question
            {
                SurveyId = questionEntity.SurveyId
            };
        }
        StateHasChanged();
    }
    public void Refresh()
    {
        using var db = ContextFactory.CreateDbContext();
        surveyTranslations = db.SurveyTranslations.Where(q => q.Language == "en").ToList();
    }

    private bool IsSurveyTaken(int surveyId)
    {
        return answers.Any(a => a.Question?.SurveyId == surveyId);
    }
}