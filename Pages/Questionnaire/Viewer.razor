@page "/list"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Model
@using Surveymatic.Pages
{
    
}
@inject IDbContextFactory<SurveymaticContext> ContextFactory
@using Surveymatic.Data
@inject SurveyService SurveyRepository

<h1>Survey</h1>
<div>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Take</th>
                 @if(UserInfo.HasRole("admin") || ("public")) {
                    <th>Edit</th>
                    } 
                <th>Title</th>
                <th>Description</th>
                <th>Instruction</th>
            </tr>
        </thead>
        <tbody>
            @foreach (SurveyTranslation surveyTranslation in surveyTranslations)
            {
                var url = "/take/" + surveyTranslation.SurveyId.ToString();
                if (IsSurveyTaken(surveyTranslation.SurveyId))
                {
                    url = "javascript:void(0)";
                }
                <tr>
                    <td>
                        @surveyTranslation.SurveyId
                    </td>
                    <td>
                        <NavLink href="@url">✔</NavLink>
                    </td>

                    @if(UserInfo.HasRole("admin") || "public" ) {

                        var editUrl = "/addsurvey/" + surveyTranslation.SurveyId;
                        <td><NavLink href="@editUrl">✏</NavLink></td>
                        }
                    <td>@surveyTranslation.Title</td>
                    <td>@surveyTranslation.Description</td>
                    <td>@surveyTranslation.Instruction</td>
                </tr>
            }

        </tbody>
    </table>
</div>





@code {

    private List<Survey> surveys = new List<Survey>();
    private List<SurveyTranslation> surveyTranslations = new List<SurveyTranslation>();

    private List<Answer> answers = new List<Answer>();

    protected override async Task OnInitializedAsync()
    {
        using var db = ContextFactory.CreateDbContext();
        surveyTranslations = await db.SurveyTranslations.Where(q => q.Language == "en").ToListAsync();
        answers = db.Answers.ToList();
        foreach (var ans in answers)
        {
            var questionEntity = await db.Questions.FindAsync(ans.QuestionId);
            ans.Question = new Question
            {
                SurveyId = questionEntity.SurveyId
            };
        }
        StateHasChanged();
    }
    public void Refresh()
    {
        using var db = ContextFactory.CreateDbContext();
        surveyTranslations = db.SurveyTranslations.Where(q => q.Language == "en").ToList();

    }

    private bool IsSurveyTaken(int surveyId)
    {
        return answers.Any(a => a.Question?.SurveyId == surveyId);
    }
}