@page "/surveyViewer"

@attribute [Authorize]


@using Surveymatic.Data
@inject SurveyService SurveyRepository

<h1>Welcome to Survey!</h1>
<p>Your current score is @currentScore</p>

<div class="wb-frm">
    <form action="#" method="get">
        <fieldset class="chkbxrdio-grp">
            <legend><span class="field-name">WET example stacked radio buttons with implicit labels</span></legend>
            <ul class="form-group list-unstyled">
                <li class="radio">
                    <label for="fruits1b"><input type="radio" name="example2" value="1" id="fruits1b" />Apple</label>
                </li>
                <li class="radio">
                    <label for="fruits2b"><input type="radio" name="example2" value="2" id="fruits2b" />Orange</label>
                </li>
                <li class="radio">
                    <label for="fruits3b"><input type="radio" name="example2" value="3" id="fruits3b" />Kiwi</label>
                </li>
                <li class="radio">
                    <label for="fruits4b"><input type="radio" name="example2" value="4" id="fruits4b" />Other</label>
                </li>
            </ul>
        </fieldset>
    </form>
</div>

@if (survey == null)
{
    <p><em>Loading...</em></p>
}
else
{

    int surveyIndex = 0;
    @foreach (var surveyItem in survey)
    {
        <section>
            <h3>@surveyItem.Question</h3>
            <div class="form-check">
                @{
                    int choiceIndex = 0;
                    surveyScores.Add(0);
                }
                @foreach (var choice in surveyItem.Choices)
                {
                    int currentSurveyIndex = surveyIndex;
                    <input class="form-check-input" type="radio" name="@surveyIndex" value="@choiceIndex"
            @onchange="@((eventArgs) => UpdateScore(Convert.ToInt32(eventArgs.Value), currentSurveyIndex))" />@choice<br>

                    choiceIndex++;
                }
            </div>

        </section>

        surveyIndex++;
    }


}

@code {
    List<SurveyItem> survey;
    List<int> surveyScores = new List<int>();
    int currentScore = 0;

    protected override async Task OnInitializedAsync()
    {
        survey = await SurveyRepository.GetSurveyAsync();
    }

    void UpdateScore(int chosenAnswerIndex, int surveyIndex)
    {
        var surveyItem = survey[surveyIndex];

        if (chosenAnswerIndex == surveyItem.AnswerIndex)
        {
            surveyScores[surveyIndex] = surveyItem.Score;
        }
        else
        {
            surveyScores[surveyIndex] = 0;
        }
        currentScore = surveyScores.Sum();
    }
}