@page "/surveyViewer"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Model
@inject IDbContextFactory<HelpContext> ContextFactory

    

@attribute [Authorize]

 @using Surveymatic.Data
 @inject SurveyService SurveyRepository
 


 <h1>Survey</h1>
<div>
    <table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Instruction</th>
    </tr>
    </thead>
    <tbody>
         @foreach (SurveyTranslation surveyTranslation in surveyTranslations)
    {
        <tr>
            <td>@surveyTranslation.Title</td>
             <td>@surveyTranslation.Description</td>
              <td>@surveyTranslation.Instruction</td>
        </tr>
    }

    </tbody>
</table>
<div>
    <h4>Let's Go  taking survey----</h4>
    <p>
         <a href="/surveyTaking">Survey</a><br />
   </p>
  
</div>
</div>





@code {
    private string surveyId { get; set; }
    private string title{ get; set; }
    private List<Survey> surveys = new List<Survey>();
    private List<SurveyTranslation> surveyTranslations = new List<SurveyTranslation>();
    private List<Answer> answers = new List<Answer>();

    private List<QuestionTranslation> questionTranslations = new List<QuestionTranslation>();
  
    protected override async Task OnInitializedAsync()
    {
        
        using var db = ContextFactory.CreateDbContext();
        surveyTranslations = await db.SurveyTranslations.Where(q =>q.Language == "en" ).ToListAsync();
       // Refresh();
        
        //  Console.WriteLine("count" + surveyTranslations.Count);    

    }

    @* public async Task Refresh()
    {
        using (var db = ContextFactory.CreateDbContext())
        {
          var survey =  await db.SurveyTranslations.Select(s => new{SurveyTranslation = s}).ToListAsync;
           
        }

    } *@  

}



 