@page "/addsurvey" 

@using Surveymatic.Model;
@using Surveymatic.Data;
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<HelpContext> DbFactory



<div class="card">
    <div class="card-header">
        Add a Survey
    </div>
    <div class="card-body">
        <EditForm Model="@surveytranslation" OnValidSubmit="@HandleValidSubmit">
            <div class="form-group">
                <label for="subjectInput">Title</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="surveytranslation.Title" />
            </div>
             <div class="form-group">
                <label for="subjectInput">Description</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="surveytranslation.Description " />
            </div>   

              <div class="form-group">
                <label for="subjectInput">Instruction</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="surveytranslation.Instruction" />
            </div>                     

            <div class="form-group">
                <label for="categoryInput">Language</label>
                <InputSelect class="form-control" id="categoryInput" @bind-Value="surveytranslation.Language">
                    @{
                        foreach (var value in Enum.GetValues(typeof(Language)))
                        {
                            <option value="@value">@value</option>
                        }
                    }
                </InputSelect>
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
        <div>@success</div>
    </div>
</div>

@code {
    private SurveyTranslation surveytranslation = new SurveyTranslation();
    private string success = "";
    public void HandleValidSubmit()
    {
        try
        {

 
            using var db = DbFactory.CreateDbContext();

             db.SurveyTranslations.Add(surveytranslation);
             db.SaveChangesAsync();

           // _context.SurveyTranslations.Add(surveytranslation);
           // _context.SaveChangesAsync();

           success = "success";
        }
        catch
        {
            base.StateHasChanged();
            success = "no success";
        }
        surveytranslation = new SurveyTranslation();
        base.StateHasChanged();


        
    }
}