@page "/addquestion" 

@using Surveymatic.Model;
@using Surveymatic.Data;
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<SurveymaticContext> DbFactory


<div class="card">
    <div class="card-header">
        Add a Survey
    </div>
    <div class="card-body">
        <EditForm Model="@questiontranslation" OnValidSubmit="@HandleValidSubmit">
 
            <div class="form-group">
                <label for="subjectInput">Question text</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="questiontranslation.Text" />
            </div>             

            <div class="form-group">
                <label for="categoryInput">Language</label>
                <InputSelect class="form-control" id="categoryInput" @bind-Value="questiontranslation.Language">
                    @{
                        foreach (var value in Enum.GetValues(typeof(Language)))
                        {
                            <option value="@value">@value</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="amountInput">Question Order</label>
                <InputNumber class="form-control" id="amountInput" @bind-Value="questiontranslation.Type" />
            </div>

            <div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
        <div>@success</div>
    </div>
</div>
@code {
    private QuestionTranslation questiontranslation = new QuestionTranslation();
    private string success = "";
    public void HandleValidSubmit()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();

             db.QuestionTranslations.Add(questiontranslation);
             var item = db.SaveChangesAsync();


           success = "success";
        }
        catch
        {
            base.StateHasChanged();
            success = "no success";
        }


            //from Lab5/Pages/Blog.razor
            var entry = new QuestionTranslation{ Language = questiontranslation.Language, Text = questiontranslation.Text, Type = questiontranslation.Type };
            using (var ctx = DbFactory.CreateDbContext())
            {
                ctx.QuestionTranslations.Add(entry);
                var item = ctx.SaveChangesAsync();
            }

        
}
}