@page "/LogIn"

@using Microsoft.EntityFrameworkCore
@using Model.LoginData
@using Model
@using Data
@inject ForgotPassForm forgotPassUser
@inject IDbContextFactory<SurveymaticContext> DbFactory
@inject NavigationManager navigate
@inject SiteUser siteuser
@using CryptoHelper
@inject NavigationManager navigate
@inject SiteUser loggedUser
@inject LoginForm loginformUser
@inject Surveymatic.Services.IRefreshService Refresh



<main role="main" property="mainContentOfPage" class="container">
    <h1 id="wb-cont" property="name">Login</h1>
    <section>
        <h4>@message</h4>
    </section>
    <section>
        <div class="newsiteuser-form">
            <EditForm Model=@loginformUser OnValidSubmit=@HandleValidSubmit>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="Email">Email</label>
                    <InputText id="Email" class="form-control" @bind-Value="loginformUser.Email" />
                </div>

                <div class="form-group">
                    <label for="Password">Password</label>
                    <InputText id="Password" type="password" class="form-control"
                        @bind-Value="loginformUser.Password" />
                </div>

                <button class="btn btn-primary" type="submit">LogIn</button>
            </EditForm>
        </div>
    </section>
    <section>
        <br />
        <a href="ForgotPass">Forgot Password ?</a>
        <br />
        <a href="register">Register</a>
    </section>
</main>
@code
{
    string message = "";
    //private SiteUser newsiteuser;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //newsiteuser = new SiteUser();
        loginformUser = new LoginForm();
    }


    private void HandleValidSubmit()
    {
        using var _context = DbFactory.CreateDbContext();
        try
        {
            var userInDatabase = _context.SiteUsers
            .Where(x => x.Email == loginformUser.Email)
            .Include(r => r.Roles)
            .FirstOrDefault();


            //if (userInDatabase != null && userInDatabase.Password == encrypedPasswordFromUI)

            var verify = Crypto.VerifyHashedPassword(userInDatabase.Password, loginformUser.Password);


            if (userInDatabase != null && Crypto.VerifyHashedPassword(userInDatabase.Password, loginformUser.Password))
            {
                UserInfo.Email = loginformUser.Email;
                UserInfo.LoggedIn = "Yes";
                UserInfo.User = userInDatabase;
                loggedUser = userInDatabase;
                //Menu.InvokeAsync(StateHasChanged);

                Refresh.CallRequestRefresh();
                navigate.NavigateTo("/Admin");
                //navigate.NavigateTo("/Admin/" + loggedUser.Email);
            }
            else
            {
                message = "Wrong email or password ! Log in failed. Try again";

            }
        }
        catch (Exception ex)
        {
            var info = ex.Message;
        }
    }

}