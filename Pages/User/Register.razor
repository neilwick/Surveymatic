@page "/Register"
@using Microsoft.EntityFrameworkCore
@using Model
@using Data
@inject IDbContextFactory<SurveymaticContext> DbFactory
@using CryptoHelper
@using Surveymatic.Model.LoginData
@inject NavigationManager navigate
@inject RegistrationForm registrationFormUser
@using Microsoft.AspNetCore.Components.Web

<h1>Register</h1>
<hr />
<h4>@message</h4>

<div class="newsiteuser-form">


    <EditForm Model=@registrationFormUser OnValidSubmit=@HandleValidSubmit>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Email">Email</label>
            <InputText id="Email" class="form-control" @bind-Value="registrationFormUser.Email" />
        </div>

        <div class="form-group">
            <label for="Password">Password</label>
            <InputText id="Password" type="password" class="form-control" @bind-Value="registrationFormUser.Password" />
        </div>

        <div class="form-group">
            <label for="ConfirmPassword">Confirm Password</label>
            <InputText id="ConfirmPassword" type="password" class="form-control"
                @bind-Value="registrationFormUser.ConfirmPassword" />
        </div>
        <button class="btn btn-primary" type="submit">Register</button>
    </EditForm>
</div>
<br>
<HelpContent HelpTag="register" />


@code
{
    string message = "";
    string encrypedString = "";
    public SiteUser newsiteuser = new SiteUser();




    private async void HandleValidSubmit()
    {
        using var _context = DbFactory.CreateDbContext();
        try
        {
            var userInDatabase = _context.SiteUsers.Where(x => x.Email == registrationFormUser.Email).FirstOrDefault();
            if (userInDatabase == null)
            {
                if (registrationFormUser.Password == registrationFormUser.ConfirmPassword)
                {

                    encrypedString = Crypto.HashPassword(registrationFormUser.Password);
                    newsiteuser.Email = registrationFormUser.Email;
                    newsiteuser.Password = encrypedString;
                    newsiteuser.Roles = new List<SiteRole>();
                    newsiteuser.Roles.Add(new SiteRole
                    {
                        RoleName = "public"
                    });
                    _context.SiteUsers.Add(newsiteuser);
                    await _context.SaveChangesAsync();

                    UserInfo.Email = registrationFormUser.Email;

                    navigate.NavigateTo($"/RegistrationConfirm");

                }

            }
            else
            {
                message = "Email address already registered! Please use another! ";
            }

        }
        catch (DbUpdateException e)
        {
            var info = e.Message;
        }
        catch (Exception ex)
        {
            var message = ex.Message;

            base.StateHasChanged();
        }
        registrationFormUser = new();
        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        registrationFormUser = new RegistrationForm();
    }

}