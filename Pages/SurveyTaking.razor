 @page "/surveyTaking"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Model
@inject IDbContextFactory<HelpContext> ContextFactory

 
@attribute [Authorize]

 @using Surveymatic.Data
 @inject SurveyService SurveyRepository


 <h1>Survey Choice</h1>
 <div class="row">
    <div class="col-md-4">

        @* <EditForm Model=@questionTranslations OnSubmit=@FormSubmitted> *@
            @*<form method="post">*@
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <div>
                    <label asp-for="Survey.UserId" class="control-label"></label>
                </div>
                <div>
                    <select asp-for="Survey.UserId" asp-items="ViewBag.SurveyId" name="surveySelect" @onchange="@SurveyChoice" style="width:150px">
                        @foreach (SurveyTranslation surveyTranslation in surveyTranslations)
                        {
                            <option value="@surveyTranslation.SurveyId">@surveyTranslation.Title</option>

                        }
                    </select>

                </div>
            </div>
            <div class="form-group">
                <h2>Please answer “YES” or “NO”,TRUE or FALSE to each question:</h2>
            </div>
            <div class="form-group">
                <ul>
                    @foreach (QuestionTranslation questionTranslation in questionTranslations)
                    {
                    <li>
                        <h3>@questionTranslation.Text</h3>
                        <label>
                                <input name="@questionTranslation.QuestionId"   type="radio"  
                                  checked="@(@GetAnswerById(questionTranslation.QuestionId).AnswerInt == 1)"   
                                  value="1" bind="GetAnswerById(questionTranslation.QuestionId).AnswerInt"
                                  /> Yes
                            </label>
                            <label>
                                <input name="@questionTranslation.QuestionId" type="radio" 
                                   checked="@(@GetAnswerById(questionTranslation.QuestionId).AnswerInt == 0)"   
                                  value="0"  bind="GetAnswerById(questionTranslation.QuestionId).AnswerInt" /> No
                            </label>

                        @* @foreach (Answer answer in questionTranslation.Question.Answers)
                        {
                            <label>
                                <input name="@questionTranslation.QuestionId" type="radio" value="yes"  onchange="">
                            </label>
                            
                        } *@

                    </li>

                    }
                </ul>

            </div>
            <div class="form-group">
                <div>
                    <input type="submit" value="Submit" class="btn btn-primary"  @onclick="submitSurvey" />
                     <input type="cancel" value="Cancel" class="btn btn-primary"   @onclick="cancelSurvey"/>
                    
                </div>                                        
            </div>                        
    </div>
</div>

@code {
    private string surveyId { get; set; }
    private string title{ get; set; }
    private string success = "";
    private string answerTxt;
    private int answerInt;
    //private int PersonId;
    private List<Survey> surveys = new List<Survey>();
    private List<SurveyTranslation> surveyTranslations = new List<SurveyTranslation>();
    private List<Answer> answers = new List<Answer>();

   

    private List<QuestionTranslation> questionTranslations = new List<QuestionTranslation>();

  
     private string answer1 = "question1";
    

    protected override async Task OnInitializedAsync()
    {
        
        using var db = ContextFactory.CreateDbContext();
        surveyTranslations = await db.SurveyTranslations.Where(q =>q.Language == "en" ).ToListAsync();
        answers = await db.Answers.ToListAsync();
       // Refresh();  
        //  Console.WriteLine("count" + surveyTranslations.Count);   


    }


    public async Task Refresh()
    {
      using var db = ContextFactory.CreateDbContext();
        surveyTranslations = await db.SurveyTranslations.Where(q =>q.Language == "en" ).ToListAsync();

    }
    private Answer GetAnswerById(int id)
    {
        foreach(var ans in answers) {
            if (ans.QuestionId == id) {
                return ans;
            }
        }
        return null;
        @* using (var db = ContextFactory.CreateDbContext())
        {
            var answers = db.Answers.Where(a => a.QuestionId == id);
            return answers.FirstOrDefault();
        } *@

    }


    private async Task SurveyChoice(ChangeEventArgs e) {

        // surveys.Clear();
        //  title = string.Empty;

        int surveyId = int.Parse(e.Value.ToString());

        using var db = ContextFactory.CreateDbContext();

        questionTranslations = await db.QuestionTranslations.Include(qt =>qt.Question.Answers)
       .Where(q =>q.Language == "en" && q.Question.SurveyId == surveyId).ToListAsync();

         @* questionTranslations = await db.QuestionTranslations.ToListAsync(); *@

         answers.Clear();
         foreach(var q in questionTranslations){
             answers.Add(new Answer{
                QuestionId = q.QuestionId,
                AnswerInt = 0, 
                AnswerTxt ="No",
                PersonId = 100
            
             });
         }


    }

    private async void submitSurvey()
    {
        try
        {
           
            using (var db = ContextFactory.CreateDbContext())
            {
                foreach(var ans in answers){
                    db.Answers.Add(new Answer{
                        QuestionId = ans.QuestionId, AnswerInt = ans.AnswerInt,AnswerTxt = ans.AnswerTxt,PersonId = 100
                    });
                }
               
                 await db.SaveChangesAsync();

             } 

            success = "saved successfully";
        }
        catch
        {
            base.StateHasChanged();
            success = "unsuccessfully";
        }

    }
    private void cancelSurvey()
    {

    }


    @* void FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();

    } *@


}



 