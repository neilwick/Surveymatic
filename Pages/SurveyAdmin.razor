@page "/admin"

@using Radzen
@using Surveymatic.Model;
@using Surveymatic.Components;
@using Surveymatic.Data;
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics;

@using Microsoft.AspNetCore.Components;


@inject IDbContextFactory<HelpContext> DbFactory

<h1>Admin</h1>

@* example 0 *@


@* example 1 *@

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    int currentCount = 0;

    [Parameter]
    public int IncrementAmount { get; set; } = 1;

    void IncrementCount()
    {
        currentCount+=IncrementAmount;
        
    }
}



@* example 2 *@


@dynamicComponent()

@functions{
  RenderFragment dynamicComponent() => builder =>
    {
        builder.OpenComponent(0, typeof(AddQuestions));
        //builder.AddAttribute(1, "Title", "Some title");
        builder.CloseComponent();
    };
}

@* example 3 *@

@foreach (var widget in _components)
{
    @widget
}

@code {
    readonly List<RenderFragment> _components = new List<RenderFragment>
    {
        RenderWidgetA,
        RenderWidgetB
    };

    static readonly RenderFragment RenderWidgetA = __builder =>
    {
        <h3>Survey 1</h3>
        <p>This is a Covid survey</p>
    };

    static readonly RenderFragment RenderWidgetB = __builder =>
    {
        <h3>Survey 2</h3>
        <p>This is a 2021 survey </p>
    };
}

@* example 4 *@

<button @onclick="OnSave">Save</button>

@Message

@code {  
    string Message { get; set; }

    void OnSave()
    {
        Message = "Saved";
    }    
}

@* example 5 *@

@foreach (var todo in Todos)
{
    <p>@todo.Text</p>
    <!-- delete button goes here -->
}

@code {
    List<Todo> Todos { get; set; } = new List<Todo>
    {
        new Todo {Id = 1, Text = "Do this"},
        new Todo {Id = 2, Text = "And this"}
    };

    void Delete(Todo todo)
    {
        Debug.WriteLine($"Deleting {todo.Id}");
    }

    private class Todo
    {
        public int Id { get; set; }
        public string Text { get; set; }
    }
}

@* example 6 *@


Password: <input
    value="@Password"
    @oninput="OnPasswordChanged"
    type="@(showPassword ? "text" : "password")" />

<label><input type="checkbox" @bind="showPassword" />Show password</label>

@code {
    private bool showPassword;

    [Parameter]
    public string Password { get; set; }

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    private Task OnPasswordChanged(ChangeEventArgs e)
    {
        Password = e.Value.ToString();
        return PasswordChanged.InvokeAsync(Password);
    }
}




<div>
    What is your name?<br />
    <input @bind="text" />
    <button @onclick="OnClick">Submit</button>
</div>
<div>
    @if (name != null)
    {
        @:Hello @name
    }
</div>

@code {
    string text;
    string name;

    void OnClick() {
        name = text;
    }
}

