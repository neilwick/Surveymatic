@page "/build"

@using Surveymatic.Model;
@using Surveymatic.Data;
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<HelpContext> DbFactory

<h1>Survey # 1</h1>

<div class="card">
    <div class="card-header">
        Add a Question
    </div>
    <div class="card-body">
        <EditForm Model="@questiontranslation" OnValidSubmit="@AddEntry">
 
            <div class="form-group">
                <label for="subjectInput">Question text</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="questiontranslation.Text" />
            </div>             

            <div class="form-group">
                <label for="categoryInput">Language</label>
                <InputSelect class="form-control" id="categoryInput" @bind-Value="questiontranslation.Language">
                    @{
                        foreach (var value in Enum.GetValues(typeof(Language)))
                        {
                            <option value="@value">@value</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="amountInput">Question Order</label>
                <InputNumber class="form-control" id="amountInput" @bind-Value="questiontranslation.Type" />
            </div>

            <div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    </div>
</div>


<hr />
<div class="blog">
    @foreach (QuestionTranslation entry in listQuestions)
    {
        <AddQuestions Entry="@entry" />
    }
</div>

@code {

    private QuestionTranslation questiontranslation = new QuestionTranslation();
    private List<QuestionTranslation> listQuestions = new List<QuestionTranslation>();
    private List<string> CommentStrings = new List<string>();
    
    
    
    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

            // get survey id

    }

    private async Task AddEntry()
    {

            //from Lab5/Pages/Blog.razor
           // var entry = new QuestionTranslation{ Language = questiontranslation.Language, Text = questiontranslation.Text, Type = questiontranslation.Type };
          //  using (var ctx = DbFactory.CreateDbContext())
          //  {
          //      ctx.QuestionTranslations.Add(entry);
           //     var item = ctx.SaveChangesAsync();
          //  }              var entry = new BlogEntry { Title = title, Content = content, Time = DateTime.Now, User = iuser };



            using var db = DbFactory.CreateDbContext();
            //var surveytranslaton = await db.SurveyTranslations.Where(u => u.SurveyId == SurveyTranslation.SurveyId).FirstOrDefaultAsync<SurveyTranslation>();
            var entry = new QuestionTranslation{ Language = questiontranslation.Language, Text = questiontranslation.Text, Type = questiontranslation.Type };
            db.QuestionTranslations.Add(entry);
            await db.SaveChangesAsync();

            listQuestions.Clear();
            listQuestions.AddRange(await db.QuestionTranslations
                .Include(u => u.Language)
                .Include(c => c.Text)
                .OrderByDescending(b => b.Type)
                .ToListAsync());



            //var survey = new Survey();
            //var question = new Question();
            
            //using var db = DbFactory.CreateDbContext();

            //survey.Questions.Add(question);
            //db.Surveys.Add(survey); 
            //db.Questions.Add(question);
            //questiontranslation.Question= question;
            //db.QuestionTranslations.Add(questiontranslation);
            //await db.SaveChangesAsync(); 

    }

}